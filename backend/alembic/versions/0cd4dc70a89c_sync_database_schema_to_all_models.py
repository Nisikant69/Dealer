"""Sync database schema to all models

Revision ID: 0cd4dc70a89c
Revises: 
Create Date: 2025-10-24 05:25:49.859301

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0cd4dc70a89c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sales')
    op.drop_table('agents')
    op.drop_table('appointments')
    op.drop_table('tasks')
    op.drop_table('users')
    op.create_index(op.f('ix_call_logs_call_log_id'), 'call_logs', ['call_log_id'], unique=False)
    op.alter_column('customers', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.drop_constraint(op.f('customers_email_key'), 'customers', type_='unique')
    op.drop_constraint(op.f('customers_phone_number_key'), 'customers', type_='unique')
    op.create_index(op.f('ix_customers_customer_id'), 'customers', ['customer_id'], unique=False)
    op.create_index(op.f('ix_customers_email'), 'customers', ['email'], unique=True)
    op.create_index(op.f('ix_customers_phone_number'), 'customers', ['phone_number'], unique=True)
    op.drop_column('customers', 'created_at')
    op.create_index(op.f('ix_documents_document_id'), 'documents', ['document_id'], unique=False)
    op.create_unique_constraint(None, 'documents', ['file_path'])
    op.drop_constraint(op.f('documents_customer_id_fkey'), 'documents', type_='foreignkey')
    op.drop_constraint(op.f('documents_created_by_user_id_fkey'), 'documents', type_='foreignkey')
    op.create_foreign_key(None, 'documents', 'customers', ['customer_id'], ['customer_id'])
    op.drop_column('documents', 'document_data')
    op.drop_column('documents', 'status')
    op.drop_column('documents', 'created_by_user_id')
    op.alter_column('interactions', 'sentiment',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.create_index(op.f('ix_interactions_interaction_id'), 'interactions', ['interaction_id'], unique=False)
    op.drop_constraint(op.f('interactions_user_id_fkey'), 'interactions', type_='foreignkey')
    op.drop_column('interactions', 'user_id')
    op.alter_column('vehicles', 'configuration_details',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_index(op.f('ix_vehicles_vehicle_id'), 'vehicles', ['vehicle_id'], unique=False)
    op.drop_column('vehicles', 'stock_status')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vehicles', sa.Column('stock_status', sa.VARCHAR(length=50), server_default=sa.text("'Available'::character varying"), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_vehicles_vehicle_id'), table_name='vehicles')
    op.alter_column('vehicles', 'configuration_details',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('interactions', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('interactions_user_id_fkey'), 'interactions', 'users', ['user_id'], ['user_id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_interactions_interaction_id'), table_name='interactions')
    op.alter_column('interactions', 'sentiment',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.add_column('documents', sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('documents', sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'Draft'::character varying"), autoincrement=False, nullable=True))
    op.add_column('documents', sa.Column('document_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'documents', type_='foreignkey')
    op.create_foreign_key(op.f('documents_created_by_user_id_fkey'), 'documents', 'users', ['created_by_user_id'], ['user_id'])
    op.create_foreign_key(op.f('documents_customer_id_fkey'), 'documents', 'customers', ['customer_id'], ['customer_id'], ondelete='CASCADE')
    op.drop_constraint(None, 'documents', type_='unique')
    op.drop_index(op.f('ix_documents_document_id'), table_name='documents')
    op.add_column('customers', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_customers_phone_number'), table_name='customers')
    op.drop_index(op.f('ix_customers_email'), table_name='customers')
    op.drop_index(op.f('ix_customers_customer_id'), table_name='customers')
    op.create_unique_constraint(op.f('customers_phone_number_key'), 'customers', ['phone_number'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('customers_email_key'), 'customers', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('customers', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_index(op.f('ix_call_logs_call_log_id'), table_name='call_logs')
    op.create_table('users',
    sa.Column('user_id', sa.INTEGER(), server_default=sa.text("nextval('users_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('tasks',
    sa.Column('task_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('assigned_to_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'Pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'Normal'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_to_user_id'], ['users.user_id'], name=op.f('tasks_assigned_to_user_id_fkey')),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.customer_id'], name=op.f('tasks_customer_id_fkey')),
    sa.PrimaryKeyConstraint('task_id', name=op.f('tasks_pkey'))
    )
    op.create_table('appointments',
    sa.Column('appointment_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('vehicle_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('appointment_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'Scheduled'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.customer_id'], name=op.f('appointments_customer_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('appointments_user_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.vehicle_id'], name=op.f('appointments_vehicle_id_fkey')),
    sa.PrimaryKeyConstraint('appointment_id', name=op.f('appointments_pkey'))
    )
    op.create_table('agents',
    sa.Column('agent_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('agent_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('agent_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'Active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_health_check', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('agent_id', name=op.f('agents_pkey')),
    sa.UniqueConstraint('agent_name', name=op.f('agents_agent_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('sales',
    sa.Column('sale_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('vehicle_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('final_price', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('sale_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sold_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.customer_id'], name=op.f('sales_customer_id_fkey'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.document_id'], name=op.f('sales_document_id_fkey')),
    sa.ForeignKeyConstraint(['sold_by_user_id'], ['users.user_id'], name=op.f('sales_sold_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.vehicle_id'], name=op.f('sales_vehicle_id_fkey'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('sale_id', name=op.f('sales_pkey'))
    )
    # ### end Alembic commands ###
